<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>龙宇翔的小本本</title><link>https://longxiucai.github.io</link><description> </description><copyright>龙宇翔的小本本</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://longxiucai.github.io</link></image><lastBuildDate>Tue, 02 Jul 2024 03:23:34 +0000</lastBuildDate><managingEditor>龙宇翔的小本本</managingEditor><ttl>60</ttl><webMaster>龙宇翔的小本本</webMaster><item><title>修改pod网段与calico配置</title><link>https://longxiucai.github.io/post/xiu-gai-pod-wang-duan-yu-calico-pei-zhi.html</link><description>1. vim /etc/kubernetes/manifests/kube-controller-manager.yaml 【3个master一个一个的执行，最好是kube-controller-manager-节点名字的pod Running之后再修改下一个节点】&#13;
		19行：--cluster-cidr=10.128.0.0/18&#13;
&#13;
2. kubectl edit cm kubeadm-config -n kube-system&#13;
		podSubnet: 10.128.0.0/18&#13;
&#13;
3. kubectl edit cm kube-proxy -n kube-system&#13;
		clusterCIDR: 10.128.0.0/18&#13;
&#13;
4. kubectl edit ippool default-ipv4-ippool&#13;
		cidr: 10.128.0.0/18&#13;
&#13;
5. kubectl edit cm calico-config -n kube-system ：&#13;
          'ipam': {&#13;
              'type': 'calico-ipam',					              #逗号&#13;
              'ipv4_pools': ['default-ipv4-ippool']   #添加此行，前面必须是空格不能是tab&#13;
          },&#13;
&#13;
6. kubectl rollout restart -n kube-system daemonset.apps/calico-node&#13;
等待calico的pod全部running，全部节点查看配置文件是否有'ipv4_pools': ['default-ipv4-ippool']：&#13;
cat /etc/cni/net.d/00-multus.conf&#13;
cat /etc/cni/net.d/10-calico.conflist&#13;
&#13;
7. kubectl  edit ippool kubevirt-vm-ippool&#13;
  cidr: 10.128.128.0/18&#13;
&#13;
8. kubectl delete ippool other-ippool&#13;
&#13;
9. kubectl cluster-info dump | grep cluster-cidr&#13;
&#13;
&#13;
默认使用default pool，开启noipam功能&#13;
calico-config configMap:&#13;
cni.projectcalico.org/ipAddrsNoIpam&#13;
```&#13;
apiVersion: v1&#13;
data:&#13;
  calico_backend: bird&#13;
  cni_network_config: |-&#13;
    {&#13;
      'name': 'k8s-pod-network',&#13;
      'cniVersion': '0.3.1',&#13;
      'plugins': [&#13;
        {&#13;
          'type': 'calico',&#13;
          'log_level': 'info',&#13;
          'log_file_path': '/var/log/calico/cni/cni.log',&#13;
          'datastore_type': 'kubernetes',&#13;
          'nodename': '__KUBERNETES_NODE_NAME__',&#13;
          'mtu': __CNI_MTU__,&#13;
          'ipam': {&#13;
              'type': 'calico-ipam',&#13;
              'ipv4_pools': ['default-ipv4-ippool']&#13;
          },&#13;
          'policy': {&#13;
              'type': 'k8s'&#13;
          },&#13;
          'kubernetes': {&#13;
              'kubeconfig': '__KUBECONFIG_FILEPATH__'&#13;
          },&#13;
         'feature_control': {&#13;
             'ip_addrs_no_ipam': true&#13;
         }&#13;
        },&#13;
        {&#13;
          'type': 'portmap',&#13;
          'snat': true,&#13;
          'capabilities': {'portMappings': true}&#13;
        },&#13;
        {&#13;
          'type': 'bandwidth',&#13;
          'capabilities': {'bandwidth': true}&#13;
        }&#13;
      ]&#13;
    }&#13;
  typha_service_name: none&#13;
  veth_mtu: '0'&#13;
kind: ConfigMap&#13;
metadata:&#13;
  name: calico-config&#13;
  namespace: kube-system&#13;
```&#13;
&#13;
。</description><guid isPermaLink="true">https://longxiucai.github.io/post/xiu-gai-pod-wang-duan-yu-calico-pei-zhi.html</guid><pubDate>Tue, 02 Jul 2024 03:23:13 +0000</pubDate></item><item><title>go解析证书文件</title><link>https://longxiucai.github.io/post/go-jie-xi-zheng-shu-wen-jian.html</link><description>```&#13;
package cert&#13;
&#13;
import (&#13;
	'crypto/x509'&#13;
	'encoding/pem'&#13;
	'os'&#13;
	'path/filepath'&#13;
	'strings'&#13;
	'time'&#13;
&#13;
	log 'github.com/sirupsen/logrus'&#13;
)&#13;
&#13;
func parseCertificate(file string) {&#13;
	// 读取文件内容&#13;
	fileData, err := os.ReadFile(file)&#13;
	if err != nil {&#13;
		log.Errorf('Error reading file %s: %s\n', file, err)&#13;
		return&#13;
	}&#13;
&#13;
	// 解析 PEM 块&#13;
	block, _ := pem.Decode(fileData)&#13;
	if block == nil {&#13;
		log.Errorf('No PEM block found in file %s\n', file)&#13;
		return&#13;
	}&#13;
&#13;
	// 判断文件类型&#13;
	fileType := strings.ToLower(filepath.Ext(file))&#13;
	switch fileType {&#13;
	case '.crt', '.pem':&#13;
		// 解析证书&#13;
		cert, err := x509.ParseCertificate(block.Bytes)&#13;
		if err != nil {&#13;
			log.Errorf('Error parsing certificate from file %s: %s\n', file, err)&#13;
			return&#13;
		}&#13;
&#13;
		// 输出证书有效期等信息&#13;
		log.Infof('Certificate in file %s:', file)&#13;
		log.Infof('  Subject: %s', cert.Subject.CommonName)&#13;
		log.Infof('  Valid from: %s', cert.NotBefore)&#13;
		log.Infof('  Valid until: %s', cert.NotAfter)&#13;
&#13;
		// 计算证书有效期结束时间与当前时间之间的天数差&#13;
		now := time.Now()&#13;
		expiresInDays := int((time.Duration(cert.NotAfter.Sub(now).Hours()) / 24))&#13;
		log.Infof('证书%s 将于 %d 天后过期', cert.Subject.CommonName, expiresInDays)&#13;
		log.Infof('---------------------------')&#13;
	default:&#13;
		log.Infof('Unsupported file type: %s %s', fileType, file)&#13;
	}&#13;
}&#13;
```。</description><guid isPermaLink="true">https://longxiucai.github.io/post/go-jie-xi-zheng-shu-wen-jian.html</guid><pubDate>Tue, 02 Jul 2024 02:33:15 +0000</pubDate></item><item><title>go连接数据库</title><link>https://longxiucai.github.io/post/go-lian-jie-shu-ju-ku.html</link><description>```&#13;
package dbtest&#13;
&#13;
import (&#13;
	'database/sql'&#13;
	'fmt'&#13;
	'log'&#13;
&#13;
	_ 'github.com/go-sql-driver/mysql'&#13;
)&#13;
&#13;
func maindb() {&#13;
	// 连接 MySQL 数据库&#13;
	db, err := sql.Open('mysql', 'dbinit:123456@tcp(10.42.186.232:3306)/dbinit_test')&#13;
	if err != nil {&#13;
		log.Fatal(err)&#13;
	}&#13;
	defer db.Close()&#13;
&#13;
	// 测试连接&#13;
	err = db.Ping()&#13;
	if err != nil {&#13;
		log.Fatal('Error connecting to the database:', err)&#13;
	}&#13;
&#13;
	fmt.Println('Connected to MySQL database successfully!')&#13;
&#13;
	// 查询示例&#13;
	rows, err := db.Query('SELECT * FROM users')&#13;
	if err != nil {&#13;
		log.Fatal('Error executing query:', err)&#13;
	}&#13;
	defer rows.Close()&#13;
&#13;
	// 遍历查询结果&#13;
	for rows.Next() {&#13;
		var id int&#13;
		var name string&#13;
		err := rows.Scan(&amp;id, &amp;name)&#13;
		if err != nil {&#13;
			log.Fatal('Error scanning row:', err)&#13;
		}&#13;
		fmt.Printf('ID: %d, Name: %s\n', id, name)&#13;
	}&#13;
}&#13;
```。</description><guid isPermaLink="true">https://longxiucai.github.io/post/go-lian-jie-shu-ju-ku.html</guid><pubDate>Tue, 02 Jul 2024 02:04:36 +0000</pubDate></item></channel></rss>